@page "/calculator"
@rendermode InteractiveServer
<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<div class="card">
    <div class="card-body">
        <p role="status">@displayNumber</p>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-outline-primary" @onclick="ResetAll">All Clear</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="TogglePlusAndMinus">+/-</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="Percentage">%</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Calculation.Divide ? "active" : "")" @onclick=" CalculationStateDivide">/</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSeven">7</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadEight">8</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadNine">9</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Calculation.Multiply ? "active" : "")" @onclick="CalculationStateMultiply">x</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFour">4</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFive">5</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSix">6</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Calculation.Minus ? "active" : "")" @onclick="CalculationStateMinus">-</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadOne">1</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTwo">2</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTree">3</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Calculation.Plus ? "active" : "")" @onclick="CalculationStatePlus">+</button>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn btn-outline-secondary" @onclick="NumPadZero">0</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="CommaOn">,</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Calculation.Som ? "active" : "")" @onclick="CalculationStateSwitch">=</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
@code {
    private bool isCommaOn = false;
    private bool isCalculationOn = false; 
    private List<int> displayNumbers = new List<int>(); 
    private char[] charDecimals = new char[7];
    private decimal currentNumber = 0;

    private string displayNumber = "0";
    private string result = "";
    private string decimals = "";
    private string showPlusMinus = "";
    private string calculationNumbers = "";

    private Calculation stateCalculation = Calculation.None;
    private Calculation stateActiveButton = Calculation.None;

    private enum Calculation
    {
        Divide,
        Multiply,
        Minus,
        Plus,
        Som,
        None
    }

    private void ResetAll()
    {
        displayNumber = "0";
        result = "";
        decimals = "";
        showPlusMinus = "";
        calculationNumbers = "";
        isCommaOn = false; 
        isCalculationOn = false; 
        currentNumber = 0;
        charDecimals = new char[7];
        displayNumbers = new List<int>();
        stateCalculation = Calculation.None;
        stateActiveButton = Calculation.None;
    }

    /* Display digits including plus or minus sigh and decimals */
    private void DisplayDigits()
    {
        result = "";

        switch (displayNumbers.Count - 1)
        {
            case 0:
                result += $"{showPlusMinus}{displayNumbers[0]}{decimals}";
                break;
            case 1:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}{decimals}";
                break;
            case 2:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}{displayNumbers[2]}{decimals}";
                break;
            case 3:
                result += $"{showPlusMinus}{displayNumbers[0]}.{displayNumbers[1]}{displayNumbers[2]}{displayNumbers[3]}{decimals}";
                break;
            case 4:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}.{displayNumbers[2]}{displayNumbers[3]}{displayNumbers[4]}{decimals}";
                break;
            case 5:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}{displayNumbers[2]}.{displayNumbers[3]}{displayNumbers[4]}{displayNumbers[5]}{decimals}";
                break;
            case 6:
                result += $"{showPlusMinus}{displayNumbers[0]}.{displayNumbers[1]}{displayNumbers[2]}{displayNumbers[3]}.{displayNumbers[4]}{displayNumbers[5]}{displayNumbers[6]}{decimals}";
                break;
            case 7:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}.{displayNumbers[2]}{displayNumbers[3]}{displayNumbers[4]}.{displayNumbers[5]}{displayNumbers[6]}{displayNumbers[7]}{decimals}";
                break;
            default:
                result += $"{showPlusMinus}{displayNumbers[0]}{displayNumbers[1]}{displayNumbers[2]}.{displayNumbers[3]}{displayNumbers[4]}{displayNumbers[5]}.{displayNumbers[6]}{displayNumbers[7]}{displayNumbers[8]}{decimals}";
                break;
        }

        displayNumber = result; 
    }

    /* Flag for comma when it's pressed */
    private void CommaOn()
    {
        isCommaOn = true;
    }

    /* The decimals need to be converted to array of characters and then each character count if it's an digit */
    private int CountDigitInDecimals()
    {
        int countDigit = 0;
        charDecimals = decimals.ToCharArray();

        foreach (char item in charDecimals)
        {
            if (char.IsDigit(item))
                countDigit++;
        }

        return countDigit;
    }

    /* Will strip the numbers of the characters '-' and ','. */
    private void FillDisplayNumbers(int fillDigit, string fillDecimals)
    {
        int totalDigit = displayNumbers.Count + CountDigitInDecimals();

        if (isCalculationOn && isCommaOn)
        {
            string resultComma = calculationNumbers.Contains(',') ? "" : ",";
            calculationNumbers += $"{resultComma}{fillDigit}";
            displayNumber = calculationNumbers;
        }
        else if (isCalculationOn)
        {
            calculationNumbers += fillDigit;
            displayNumber = calculationNumbers;
        }
        else if (isCommaOn && totalDigit < 9)
        {  
            result = displayNumber.Contains(',') ? "" : ",";
            decimals += result + fillDecimals;

            DisplayDigits();
        }
        else
        {
            if (totalDigit < 9 && displayNumbers.Count < 9)
                displayNumbers.Add(fillDigit);

            DisplayDigits();
        }  
    }

    /* Convert the resulat calculation from double to string so all each character
     * can be parsed to an interger and stored in numbers for displaying the digits.
     * When a string contains a comma, all the numbers before the comma will be stripped apart
     * parsed to an integer and stored in numbers. The numbers after the comma wille be stored
     * in decimals. */
    private void ConvertCalculationStringToNumbers(decimal resultCalculation)
    {
        decimals = "";
        showPlusMinus = "";
        displayNumbers = new List<int>();  // reset old values

        string tempResult = resultCalculation.ToString();

        if (tempResult.StartsWith('-'))
        {
            showPlusMinus = "-";
            tempResult = tempResult.Substring(1);
        }

        if (tempResult.Contains(','))
        {
            int indexComma = tempResult.IndexOf(',');
            decimals = tempResult.Substring(indexComma);  // numbers after comma are stored in decimals
            tempResult = tempResult.Substring(0, indexComma);
        }

        char[] tempCharArr = tempResult.ToCharArray();

        // add to all numbers before comma
        foreach (char item in tempCharArr)
        {
            if (char.IsDigit(item))
            {
                int number = int.Parse(item.ToString());
                displayNumbers.Add(number);
            } 
        }
    }

    /* The minus sign will be toggled on and off based on calculation is on. */
    private void TogglePlusAndMinus()
    {
        showPlusMinus = "";
        string showPlusMinusCalcNumber = ""; 

        if (!isCalculationOn)
        {
            if (displayNumber.Contains('-'))
            {
                int indexPlusMinus = displayNumber.IndexOf('-');
                displayNumber = displayNumber.Remove(indexPlusMinus, 1);
            }
            else
            {
                showPlusMinus += "-";
            }

            currentNumber = decimal.Parse($"{showPlusMinus}{displayNumber}");
            ConvertCalculationStringToNumbers(currentNumber);
            DisplayDigits();
        }
        else
        {
            if (calculationNumbers.Contains('-'))
            {
                int indexPlusMinus = calculationNumbers.IndexOf('-');
                calculationNumbers = calculationNumbers.Remove(indexPlusMinus, 1);
            }
            else
            {
                showPlusMinusCalcNumber += "-";
            }
            calculationNumbers = $"{showPlusMinusCalcNumber}{calculationNumbers}";
            displayNumber = calculationNumbers;
        }  
    } 

    /* Calculate the percentage of the number. */
    private void Percentage()
    { 
        decimal numberShort = decimal.Parse(displayNumber) / 100;
        displayNumber = $"{numberShort}";
         
        ConvertCalculationStringToNumbers(numberShort);

        if (isCalculationOn)
        {
            calculationNumbers = displayNumber;
        } 
        else
        {
            currentNumber = decimal.Parse(result); 
        }
    }

    /* Toggle the calculation buttons of multiply, divide, minus and plus. */
    private void ToggleCalculationActiveState(Calculation changeState)
    {
        stateCalculation = changeState;
        if (stateActiveButton != Calculation.None)
        {
            stateActiveButton = Calculation.None;
        }
        else
        {
            stateActiveButton = stateCalculation;
        }
    }

    /* This will hold isCalculation is true when divide is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateDivide()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Calculation.Divide);
    }

    /* This will hold isCalculation is true when multiply is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateMultiply()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Calculation.Multiply);
    }

    /* This will hold isCalculation is true when minus is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateMinus()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Calculation.Minus);
    }

    /* This will hold isCalculation is true when plus is clicked. Reset the state isCommaOn to false. */
    private void CalculationStatePlus()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Calculation.Plus);
    }

    /* Input data is in string and need to convert to decimal for calculation.
    * The calculation are Divide, Multiply, Minus and Plus */
    private void CalculationStateSwitch()
    {
        isCalculationOn = false;
        decimal resultCalculation = 0;
        decimal parssedCalculationNumbers = 0; 
        decimal.TryParse(calculationNumbers, out parssedCalculationNumbers);

        switch (stateCalculation)
        {
            case Calculation.Divide: 
                resultCalculation = currentNumber / parssedCalculationNumbers;
                break;
            case Calculation.Multiply:  
                resultCalculation = currentNumber * parssedCalculationNumbers;
                break;
            case Calculation.Minus:
                resultCalculation = currentNumber - parssedCalculationNumbers;
                break;
            case Calculation.Plus:
                resultCalculation = currentNumber + parssedCalculationNumbers;
                break;

        }

        ConvertCalculationStringToNumbers(resultCalculation);
        DisplayDigits();
        ToggleCalculationActiveState(Calculation.Som); 
    }

    /* Number from the numpad (0-9) will be displayd on screen with currentNumber and stored in FillCurrentNumbers. */
    private void FillNumber(int number, string numberDisplay)
    { 
        FillDisplayNumbers(number, numberDisplay);
        currentNumber = decimal.Parse(result);
    }

    private void NumPadZero()
    {
        FillNumber(0, "0");
    }

    private void NumPadOne()
    {
        FillNumber(1, "1");
    }

    private void NumPadTwo()
    {
        FillNumber(2, "2");
    }

    private void NumPadTree()
    {
        FillNumber(3, "3");
    }

    private void NumPadFour()
    {
        FillNumber(4, "4");
    }

    private void NumPadFive()
    {
        FillNumber(5, "5");
    }

    private void NumPadSix()
    {
        FillNumber(6, "6");
    }

    private void NumPadSeven()
    {
        FillNumber(7, "7");
    }

    private void NumPadEight()
    {
        FillNumber(8, "8");
    }

    private void NumPadNine()
    {
        FillNumber(9, "9");
    }


}
