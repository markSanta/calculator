@page "/calculator"
@rendermode InteractiveServer
<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<div class="card">
    <div class="card-body">
        <p role="status">@displayNumber</p>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-outline-primary" @onclick="ResetAll">All Clear</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="TogglePlusAndMinus">+/-</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="Percentage">%</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Operation.Divide ? "active" : "")" @onclick=" CalculationStateDivide">/</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSeven">7</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadEight">8</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadNine">9</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Operation.Multiply ? "active" : "")" @onclick="CalculationStateMultiply">x</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFour">4</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFive">5</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSix">6</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Operation.Minus ? "active" : "")" @onclick="CalculationStateMinus">-</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadOne">1</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTwo">2</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTree">3</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Operation.Plus ? "active" : "")" @onclick="CalculationStatePlus">+</button>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn btn-outline-secondary" @onclick="NumPadZero">0</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="CommaOn">,</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(stateActiveButton == Operation.Som ? "active" : "")" @onclick="CalculationStateSwitch">=</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
@code {
    private bool isCommaOn = false;
    private bool isCalculationOn = false;
    private bool isPlusMinusOnFirst = false;
    private bool isPlusMinusOnSecond = false;
    private List<int> displayFirstInputNumbers = new List<int>(); 
    private List<int> displaySecondnputNumbers = new List<int>();

    private decimal firstInputNumber = 0;
    private decimal secondInputNumber = 0;  

    private string displayNumber = "0";
    private string concatFirstInputNumber = "";
    private string concatSecondInputNumber = ""; 
    private string decimalsFirstInput = "";
    private string decimalsSecondInput = "";
    private string plusMinusFirstInput = "";
    private string plusMinusSecondInput = "";

    private Operation stateCalculation = Operation.None;
    private Operation stateActiveButton = Operation.None;

    private enum Operation
    {
        Divide,
        Multiply,
        Minus,
        Plus,
        Som,
        None
    }

    private void ResetAll()
    {
        displayNumber = "0";
        concatFirstInputNumber = "";
        concatSecondInputNumber = ""; 
        decimalsFirstInput = "";
        decimalsSecondInput = "";
        plusMinusFirstInput = "";
        plusMinusSecondInput = "";
        isCommaOn = false; 
        isCalculationOn = false;
        isPlusMinusOnFirst = false;
        isPlusMinusOnSecond = false;
        firstInputNumber = 0;
        secondInputNumber = 0;  

        displayFirstInputNumbers = new List<int>();
        displaySecondnputNumbers = new List<int>();
        stateCalculation = Operation.None;
        stateActiveButton = Operation.None;
    }

    /* Placeholders of numbers with plus and minus 9 digits and decimals */
    private void PlaceholderNumber(out string firstInputResult, out string secondInputResult)
    {
        firstInputResult = "";
        secondInputResult = "";

        if (!isCalculationOn)
        {
            switch (displayFirstInputNumbers.Count - 1)
            {
                case 0:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{decimalsFirstInput}";
                    break;
                case 1:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}{decimalsFirstInput}";
                    break;
                case 2:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}{displayFirstInputNumbers[2]}{decimalsFirstInput}";
                    break;
                case 3:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}.{displayFirstInputNumbers[1]}{displayFirstInputNumbers[2]}{displayFirstInputNumbers[3]}{decimalsFirstInput}";
                    break;
                case 4:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}.{displayFirstInputNumbers[2]}{displayFirstInputNumbers[3]}{displayFirstInputNumbers[4]}{decimalsFirstInput}";
                    break;
                case 5:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}{displayFirstInputNumbers[2]}.{displayFirstInputNumbers[3]}{displayFirstInputNumbers[4]}{displayFirstInputNumbers[5]}{decimalsFirstInput}";
                    break;
                case 6:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}.{displayFirstInputNumbers[1]}{displayFirstInputNumbers[2]}{displayFirstInputNumbers[3]}.{displayFirstInputNumbers[4]}{displayFirstInputNumbers[5]}{displayFirstInputNumbers[6]}{decimalsFirstInput}";
                    break;
                case 7:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}.{displayFirstInputNumbers[2]}{displayFirstInputNumbers[3]}{displayFirstInputNumbers[4]}.{displayFirstInputNumbers[5]}{displayFirstInputNumbers[6]}{displayFirstInputNumbers[7]}{decimalsFirstInput}";
                    break;
                default:
                    firstInputResult = $"{plusMinusFirstInput}{displayFirstInputNumbers[0]}{displayFirstInputNumbers[1]}{displayFirstInputNumbers[2]}.{displayFirstInputNumbers[3]}{displayFirstInputNumbers[4]}{displayFirstInputNumbers[5]}.{displayFirstInputNumbers[6]}{displayFirstInputNumbers[7]}{displayFirstInputNumbers[8]}{decimalsFirstInput}";
                    break;
            }
        }
        else
        {
            switch (displaySecondnputNumbers.Count - 1)
            {
                case 0:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{decimalsSecondInput}";
                    break;
                case 1:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}{decimalsSecondInput}";
                    break;
                case 2:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}{displaySecondnputNumbers[2]}{decimalsSecondInput}";
                    break;
                case 3:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}.{displaySecondnputNumbers[1]}{displaySecondnputNumbers[2]}{displaySecondnputNumbers[3]}{decimalsSecondInput}";
                    break;
                case 4:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}.{displaySecondnputNumbers[2]}{displaySecondnputNumbers[3]}{displaySecondnputNumbers[4]}{decimalsSecondInput}";
                    break;
                case 5:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}{displaySecondnputNumbers[2]}.{displaySecondnputNumbers[3]}{displaySecondnputNumbers[4]}{displaySecondnputNumbers[5]}{decimalsSecondInput}";
                    break;
                case 6:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}.{displaySecondnputNumbers[1]}{displaySecondnputNumbers[2]}{displaySecondnputNumbers[3]}.{displaySecondnputNumbers[4]}{displaySecondnputNumbers[5]}{displaySecondnputNumbers[6]}{decimalsSecondInput}";
                    break;
                case 7:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}.{displaySecondnputNumbers[2]}{displaySecondnputNumbers[3]}{displaySecondnputNumbers[4]}.{displaySecondnputNumbers[5]}{displaySecondnputNumbers[6]}{displaySecondnputNumbers[7]}{decimalsSecondInput}";
                    break;
                default:
                    secondInputResult = $"{plusMinusSecondInput}{displaySecondnputNumbers[0]}{displaySecondnputNumbers[1]}{displaySecondnputNumbers[2]}.{displaySecondnputNumbers[3]}{displaySecondnputNumbers[4]}{displaySecondnputNumbers[5]}.{displaySecondnputNumbers[6]}{displaySecondnputNumbers[7]}{displaySecondnputNumbers[8]}{decimalsSecondInput}";
                    break;
            }
        }
    }

    /* Flag for comma when it's pressed */
    private void CommaOn()
    {
        isCommaOn = true;
    }

    /* Count the decimals in the first input number and second input number */
    private void CountDecimalsFirstAndSecondInpuntNumber(out int countFirst, out int countSecond)
    {
        countFirst = 0;
        countSecond = 0;

        foreach (char item in decimalsFirstInput.ToCharArray())
        {
            if (char.IsDigit(item))
                countFirst++;
        }

        foreach (char item in decimalsSecondInput.ToCharArray())
        {
            if (char.IsDigit(item))
                countSecond++;
        } 
    }

    /* Will combine the first and second input numbers into string */
    private void ConcatenateNumbers(int fillDigit, string fillDigitInString)
    {
        int countFirst = 0;
        int countSecond = 0;
        CountDecimalsFirstAndSecondInpuntNumber(out countFirst, out countSecond);

        int totalDigitPlaceholderFirst = displayFirstInputNumbers.Count + countFirst;
        int totalDigitPlaceholderSecond = displayFirstInputNumbers.Count + countSecond;

        if (!isCalculationOn && isCommaOn && totalDigitPlaceholderFirst < 9)
        {
            // set comma when comma is clicked multiple times
            string firstInputWithComma = concatFirstInputNumber.Contains(',') ? "" : ",";

            // concatenate first input number with decimals
            decimalsFirstInput += firstInputWithComma + fillDigitInString;
            concatFirstInputNumber = $"{decimalsFirstInput}";

            // update placeholder of first input number
            PlaceholderNumber(out concatFirstInputNumber, out concatSecondInputNumber);

            // updating display number
            displayNumber = concatFirstInputNumber;
        } 
        else if (isCalculationOn && isCommaOn && totalDigitPlaceholderSecond < 9)
        {  
            // set comma when comma is clicked multiple times
            string secondInputWithComma = concatSecondInputNumber.Contains(',') ? "" : ",";

            // concatenate second input number with decimals
            decimalsSecondInput += secondInputWithComma + fillDigitInString;
            concatSecondInputNumber = $"{decimalsSecondInput}";

            PlaceholderNumber(out concatFirstInputNumber, out concatSecondInputNumber);

            // concatnate second input number with decimals
            displayNumber = concatSecondInputNumber;
        }  
        else
        { 
            // check for first input number if the digits has enough space to store in placeholder
            if (!isCalculationOn && totalDigitPlaceholderFirst < 9 && displayFirstInputNumbers.Count < 9)
            {
                // place the digit of fist input numbers to the placeholder
                displayFirstInputNumbers.Add(fillDigit); 

                // update first input number
                PlaceholderNumber(out concatFirstInputNumber, out concatSecondInputNumber);

                displayNumber = concatFirstInputNumber;
            }

            // check for second input number if the digits has enough space to store in placeholder
            if (isCalculationOn && totalDigitPlaceholderSecond < 9 && displaySecondnputNumbers.Count < 9)
            { 
                // place the digit of second input numbers to the placeholder
                displaySecondnputNumbers.Add(fillDigit);  

                // update second input number
                PlaceholderNumber(out concatFirstInputNumber, out concatSecondInputNumber);

                displayNumber = concatSecondInputNumber;
            } 
        }   

        SetInputNumber(concatFirstInputNumber, concatSecondInputNumber);
    }


    /* The minus sign will be toggled on and off based on for first input number and second input number */
    private void TogglePlusAndMinus()
    { 
        plusMinusFirstInput = "";
        plusMinusSecondInput = "";

        string firstInput = "";
        string secondInput = "";

        if (!isCalculationOn)
        {
            // toggle
            isPlusMinusOnFirst = !isPlusMinusOnFirst;
            plusMinusFirstInput = isPlusMinusOnFirst ? plusMinusFirstInput += "-" : plusMinusFirstInput += "";
            // overwrite display value
            displayNumber = isPlusMinusOnFirst ? displayNumber = $"{plusMinusFirstInput}{concatFirstInputNumber}" : displayNumber = $"{concatFirstInputNumber}";

            firstInput = displayNumber;
        }
        else
        {
            // toggle
            isPlusMinusOnSecond = !isPlusMinusOnSecond;
            plusMinusSecondInput = isPlusMinusOnSecond ? plusMinusSecondInput += "-" : plusMinusSecondInput += "";
            // overwrite display value
            displayNumber = isPlusMinusOnSecond ? displayNumber = $"{plusMinusSecondInput}{concatSecondInputNumber}" : displayNumber = $"{concatSecondInputNumber}";

            secondInput = displayNumber;
        }

        SetInputNumber(firstInput, secondInput); 
    } 

    /* Calculate the percentage of the number. */
    private void Percentage()
    { 
        decimal parseFirstInputNumber = 0;
        decimal parseSecondInputNumber = 0;

        decimal.TryParse(concatFirstInputNumber, out parseFirstInputNumber);
        decimal.TryParse(concatSecondInputNumber, out parseSecondInputNumber);

        decimal firstNumberInPercentage = parseFirstInputNumber / 100;
        decimal secondNumberInPercentage = parseSecondInputNumber / 100;

        //Forcing to use comma with decimal
        CultureInfo culture = new CultureInfo("nl-NL");

        string resultFirstNumber = firstNumberInPercentage.ToString(culture);
        string resultSecondNumber = secondNumberInPercentage.ToString(culture);

        // overwrite concatenate first and second input values
        concatFirstInputNumber = resultFirstNumber;
        concatSecondInputNumber = resultSecondNumber;

        //update the digits of the placeholder
        PlaceholderNumber(out resultFirstNumber, out resultSecondNumber);

        displayNumber = !isCalculationOn ? concatFirstInputNumber : concatSecondInputNumber;

        SetInputNumber(concatFirstInputNumber, concatSecondInputNumber);
    }

    /* Overwrite the value of firstInpuntNumber and secondInputNumber based on given number. 
     * The first and second input number will further needed for calculation.
    */
    private void SetInputNumber(string firstNumber, string secondNumber)
    {
        if (!string.IsNullOrEmpty(firstNumber)) 
            firstInputNumber = decimal.Parse(firstNumber);
 

        if (!string.IsNullOrEmpty(secondNumber)) 
            secondInputNumber = decimal.Parse(secondNumber);
    }

    /* Toggle the calculation buttons of multiply, divide, minus and plus. */
    private void ToggleCalculationActiveState(Operation changeState)
    {
        stateCalculation = changeState;
        if (stateActiveButton != Operation.None)
        {
            stateActiveButton = Operation.None;
        }
        else
        {
            stateActiveButton = stateCalculation;
        }
    }

    /* This will hold isCalculation is true when divide is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateDivide()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Operation.Divide);
    }

    /* This will hold isCalculation is true when multiply is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateMultiply()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Operation.Multiply);
    }

    /* This will hold isCalculation is true when minus is clicked. Reset the state isCommaOn to false. */
    private void CalculationStateMinus()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Operation.Minus);
    }

    /* This will hold isCalculation is true when plus is clicked. Reset the state isCommaOn to false. */
    private void CalculationStatePlus()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleCalculationActiveState(Operation.Plus);
    }

    /* Input data is in string and need to convert to decimal for calculation.
    * The calculation are Divide, Multiply, Minus and Plus */
    private void CalculationStateSwitch()
    {    
        decimal resultCalculation = 0;
  
        switch (stateCalculation)
        {
            case Operation.Divide: 
                resultCalculation = firstInputNumber / secondInputNumber;
                break;
            case Operation.Multiply:  
                resultCalculation = firstInputNumber * secondInputNumber;
                break;
            case Operation.Minus:
                resultCalculation = firstInputNumber - secondInputNumber;
                break;
            case Operation.Plus:
                resultCalculation = firstInputNumber + secondInputNumber;
                break;

        }
        displayNumber = resultCalculation.ToString();  
        ToggleCalculationActiveState(Operation.Som); 
        isCalculationOn = false;  
    }

    private void NumPadZero()
    { 
        ConcatenateNumbers(0, "0");
    }

    private void NumPadOne()
    { 
        ConcatenateNumbers(1, "1");
    }

    private void NumPadTwo()
    { 
        ConcatenateNumbers(2, "2");
    }

    private void NumPadTree()
    { 
        ConcatenateNumbers(3, "3");
    }

    private void NumPadFour()
    { 
        ConcatenateNumbers(4, "4");
    }

    private void NumPadFive()
    { 
        ConcatenateNumbers(5, "5");
    }

    private void NumPadSix()
    { 
        ConcatenateNumbers(6, "6");
    }

    private void NumPadSeven()
    { 
        ConcatenateNumbers(7, "7");
    }

    private void NumPadEight()
    { 
        ConcatenateNumbers(8, "8");
    }

    private void NumPadNine()
    { 
        ConcatenateNumbers(9, "9");
    }


}
