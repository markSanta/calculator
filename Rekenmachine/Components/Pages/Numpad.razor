@page "/calculator"
@using Rekenmachine.Components.Model

@rendermode InteractiveServer
<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<div class="card">
    <div class="card-body">
        <p role="status">@displayNumber</p>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-borderless">
        <tbody>
            <tr>
                <td>
                    <button class="btn btn-outline-primary" @onclick="ResetAll">All Clear</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="NumpadPlusMinus">+/-</button>
                </td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="NumpadPercentage">%</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(setActiveForOperationButton == OperationState.Divide ? "active" : "")" @onclick=" NumPadDivison">/</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSeven">7</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadEight">8</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadNine">9</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(setActiveForOperationButton == OperationState.Multiply ? "active" : "")" @onclick="NumPadMultiplication">x</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFour">4</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadFive">5</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadSix">6</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(setActiveForOperationButton == OperationState.Minus ? "active" : "")" @onclick="NumpadSubtraction">-</button>
                </td>
            </tr>
            <tr>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadOne">1</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTwo">2</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumPadTree">3</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(setActiveForOperationButton == OperationState.Plus ? "active" : "")" @onclick="NumpadAddition">+</button>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <button class="btn btn-outline-secondary" @onclick="NumPadZero">0</button>
                </td>
                <td>
                    <button class="btn btn-outline-secondary" @onclick="NumpadComma">,</button>
                </td>
                <td>
                    <button class="btn btn-outline-warning @(setActiveForOperationButton == OperationState.Som ? "active" : "")" @onclick="NumpadSom">=</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
@code {
    // flags
    private bool isCommaOn = false;
    private bool isCalculationOn = false;
    private bool isPlusMinusOnFirst = false;
    private bool isPlusMinusOnSecond = false;

    private string displayNumber = "0";
    private string tempInputNmber = string.Empty;

    // number configuration before the operation
    private Model.NumpadConfiguration first = new Model.NumpadConfiguration { InputNumber = 0 };
    // number configuration after the operation
    private Model.NumpadConfiguration second = new Model.NumpadConfiguration { InputNumber = 0 };
    // the calculator with the operation to calculate first and second
    private Model.Calculator calculator = new Model.Calculator();

    private OperationState currentOperationState = OperationState.None;
    // html active flag to indicate wich button of the operation is clicked
    private OperationState setActiveForOperationButton = OperationState.None;

    private enum OperationState
    {
        Divide,
        Multiply,
        Minus,
        Plus,
        Som,
        None
    }

    private void ResetAll()
    {
        displayNumber = "0";
        tempInputNmber = string.Empty;

        first = new Model.NumpadConfiguration { InputNumber = 0 };
        second = new Model.NumpadConfiguration { InputNumber = 0 };

        isCommaOn = false;
        isCalculationOn = false;
        isPlusMinusOnFirst = false;
        isPlusMinusOnSecond = false;

        currentOperationState = OperationState.None;
        setActiveForOperationButton = OperationState.None;
    }

    /* Flag for comma when it's pressed */
    private void NumpadComma()
    {
        isCommaOn = true;
    }

    /* Update the display number with or without the plus- & minus-sign */
    private void NumpadPlusMinus()
    {
        if (!isCalculationOn)
        {
            isPlusMinusOnFirst = !isPlusMinusOnFirst;
            displayNumber = first.TogglePlusAndMinus(isPlusMinusOnFirst);
        }
        else
        {
            isPlusMinusOnSecond = !isPlusMinusOnSecond;
            displayNumber = second.TogglePlusAndMinus(isPlusMinusOnSecond);
        }
    }

    /* Calculate the percentage of the number. */
    private void NumpadPercentage()
    {
        //Forcing to use comma with decimal
        CultureInfo culture = new CultureInfo("nl-NL");

        if (!isCalculationOn)
        {
            decimal firstNumberInPercentage = calculator.Percentage(first.InputNumber);

            // new value
            first.InputNumber = firstNumberInPercentage;
            first.DisplayNumber = firstNumberInPercentage.ToString(culture);

            // update display number
            displayNumber = firstNumberInPercentage.ToString(culture);
        }
        else
        {
            decimal secondNumberInPercentage = calculator.Percentage(second.InputNumber);

            // new value
            second.InputNumber = secondNumberInPercentage;
            second.DisplayNumber = secondNumberInPercentage.ToString(culture);

            // update display number
            displayNumber = secondNumberInPercentage.ToString(culture);
        }
    }

    /* Change the current state of operation */
    private void ToggleOperationActiveState(OperationState changeState)
    {
        // current state of operation is changed
        currentOperationState = changeState;

        if (setActiveForOperationButton != OperationState.None)
        {
            // set operation state off because an other operation button has been clicked  
            setActiveForOperationButton = OperationState.None;
        }
        else
        {
            // set operation state is current because this operation button has been clicked 
            setActiveForOperationButton = currentOperationState;
        }
    }

    /* Changes the flags of calculation and comma, and seting operation state for division */
    private void NumPadDivison()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleOperationActiveState(OperationState.Divide);
    }

    /* Changes the flags of calculation and comma, and seting operation state for multiplication  */
    private void NumPadMultiplication()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleOperationActiveState(OperationState.Multiply);
    }

    /* Changes the flags of calculation and comma, and seting operation state for subraction */
    private void NumpadSubtraction()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleOperationActiveState(OperationState.Minus);
    }

    /* Changes the flags of calculation and comma, and seting operation state for addition */
    private void NumpadAddition()
    {
        isCalculationOn = true;
        isCommaOn = false;
        ToggleOperationActiveState(OperationState.Plus);
    }

    /* Point to the right operation state for calculation and display the result */
    private void NumpadSom()
    {
        decimal resultCalculation = 0;

        switch (currentOperationState)
        {
            case OperationState.Divide:
                resultCalculation = calculator.CalculateDivision(first.InputNumber, second.InputNumber);
                break;
            case OperationState.Multiply:
                resultCalculation = calculator.CalculateMultiplication(first.InputNumber, second.InputNumber);
                break;
            case OperationState.Minus:
                resultCalculation = calculator.CalculateSubtraction(first.InputNumber, second.InputNumber);
                break;
            case OperationState.Plus:
                resultCalculation = calculator.CalculateAddition(first.InputNumber, second.InputNumber);
                break;

        }
        displayNumber = resultCalculation.ToString();
        ToggleOperationActiveState(OperationState.Som);
        isCalculationOn = false;
    }

    private void NumPadZero()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(0, "0", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(0, "0", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadOne()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(1, "1", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(1, "1", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadTwo()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(2, "2", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(2, "2", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadTree()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(3, "3", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(3, "3", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadFour()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(4, "4", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(4, "4", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadFive()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(5, "5", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(5, "5", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadSix()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(6, "6", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(6, "6", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadSeven()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(7, "7", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(7, "7", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadEight()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(8, "8", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(8, "8", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

    private void NumPadNine()
    {
        tempInputNmber = string.Empty;

        if (!isCalculationOn)
        {
            first.CollectNumber(9, "9", isCommaOn);
            tempInputNmber = first.DisplayNumber;
        }
        else
        {
            second.CollectNumber(9, "9", isCommaOn);
            tempInputNmber = second.DisplayNumber;
        }

        // update display number
        displayNumber = tempInputNmber;
    }

}
